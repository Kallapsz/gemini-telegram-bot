import google.generativeai as genai
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render) ===
BOT_TOKEN = os.getenv("8366778971:AAF93pSknWi8n641oSQ9gqC_R6sitgt5Jb0")
GEMINI_API_KEY = os.getenv("AIzaSyD00Ct0fyuFakJDMR4YH8FvQd3E6UMRRAg")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ ===
def ask_gemini(prompt):
    try:
        response = model.generate_content(prompt)
        return response.text or "ü§ñ (–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini)"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {e}"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    bot_username = context.bot.username

    # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
    if message.text and f"@{bot_username}" in message.text:
        user_prompt = message.text.replace(f"@{bot_username}", "").strip()
        reply = ask_gemini(user_prompt or "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        await message.reply_text(reply)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("ü§ñ Gemini –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()



